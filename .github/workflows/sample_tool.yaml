on:
  issue_comment:
    types: [created, edited]

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  after-checkmarx:
    if: github.event.issue.pull_request != null
    runs-on: ubuntu-latest

    steps:
      - name: Only continue if the triggering comment is the Checkmarx scan summary
        id: check-comment
        run: |
          COMMENT="${{ github.event.comment.body }}"

          echo "Triggering comment: $COMMENT"

          # Only proceed if this specific comment is the Checkmarx summary
          if echo "$COMMENT" | grep -q -E 'Checkmarx One[[:space:]]*-[[:space:]]*Scan Summary'; then
            echo "match=true" >> "$GITHUB_OUTPUT"
          else
            echo "match=false" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Stop if comment is not Checkmarx
        if: steps.check-comment.outputs.match != 'true'
        run: |
          echo "This comment is not a Checkmarx scan summary. Skipping remediation trigger."
          exit 0

      - name: Call external API with remediation data
        env:
          GITHUB_TOKEN_SECRET: ${{ secrets.NCAI_SVRT_TOKEN }}
          API_URL: ${{ vars.NCAI_SVRT_TRIGGER_URL }}
        run: |
          echo "Fetching PR data from GitHub..."
          PR_JSON=$(curl -s -H "Accept: application/vnd.github+json" \
                        -H "Authorization: Bearer $GITHUB_TOKEN_SECRET" \
                        "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}")

          GITHUB_URL=$(echo "$PR_JSON" | jq -r '.head.repo.html_url')
          BASE_BRANCH=$(echo "$PR_JSON" | jq -r '.base.ref')
          FEATURE_BRANCH=$(echo "$PR_JSON" | jq -r '.head.ref')
          REPO_NAME=$(echo "$PR_JSON" | jq -r '.head.repo.name')
          OWNER_NAME=$(echo "$PR_JSON" | jq -r '.head.repo.owner.login')
          ISSUE_NUMBER="${{ github.event.issue.number }}"

          # Encode the token as base64(username:token)
          ENCODED_AUTH=$(echo -n "x-access-token:$GITHUB_TOKEN_SECRET" | base64)


          PAYLOAD=$(jq -n \
            --arg url "$GITHUB_URL" \
            --arg default_branch "$BASE_BRANCH" \
            --arg feature_branch "$FEATURE_BRANCH" \
            --arg issue_number "$ISSUE_NUMBER" \
            --arg repo "$REPO_NAME" \
            --arg owner "$OWNER_NAME" \
            '{
              url: $url,
              default_branch: $default_branch,
              feature_branch: $feature_branch,
              issue_number: $issue_number,
              repo: $repo,
              owner: $owner
            }')

          echo "Sending data to $API_URL"
          for i in {1..3}; do
            response=$(curl -s -o response.txt -w "%{http_code}" -X POST "$API_URL" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer $ENCODED_AUTH" \
                      -d "$PAYLOAD")
            if [ "$response" -ge 200 ] && [ "$response" -lt 300 ]; then
              echo "✅ Successfully sent remediation start."
              cat response.txt
              break
            else
              echo "❌ Attempt $i failed (status $response). Retrying in 5 seconds..."
              sleep 5
            fi
          done
